import os
import random
import asyncio
from threading import Thread

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# --- Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–ë–∞–±–∞ –ú–∞–Ω—è –∂–∏–≤—ë—Ç üîÆ"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)

# --- –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
QUESTIONS = [
    ("–ö–∞–∫–æ–π —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤ –≤–µ–±–µ?", ["HTML", "Python", "C++", "CSS"], 0),
    ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2 * 2?", ["4", "6", "8", "2"], 1),
    ("–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", ["–ö–∏–æ—Ç–æ", "–û—Å–∞–∫–∞", "–¢–æ–∫–∏–æ", "–•–∏—Ä–æ—Å–∏–º–∞"], 2),
]

# --- –ö–ª–∞—Å—Å –∏–≥—Ä—ã ---
class QuizGame:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.players = []
        self.scores = {}
        self.current_q = -1
        self.q_order = random.sample(range(len(QUESTIONS)), len(QUESTIONS))
        self.active = False
        self.answered = False

    def add_player(self, user_id):
        if user_id not in self.players:
            self.players.append(user_id)
            self.scores[user_id] = 0

    def next_question(self):
        self.current_q += 1
        self.answered = False
        q_index = self.q_order[self.current_q]
        return QUESTIONS[q_index]

games = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.id in games and games[chat.id].active:
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat.id] = QuizGame(chat.id)

    kb = [[InlineKeyboardButton("üë§ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]]
    await update.message.reply_text(
        "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    await asyncio.sleep(30)
    game = games.get(chat.id)
    if not game or len(game.players) < 1:
        await context.bot.send_message(chat.id, "‚èπÔ∏è –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        games.pop(chat.id, None)
        return

    game.active = True
    await context.bot.send_message(chat.id, f"üöÄ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—Å–µ–≥–æ {len(QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await send_next_question(context, game)

async def join_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user = q.from_user
    cid = q.message.chat.id

    game = games.get(cid)
    if not game or game.active:
        return await q.answer("üö´ –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")

    if user.id in game.players:
        return await q.answer("‚úÖ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    game.add_player(user.id)
    await q.answer("üéâ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")

    names = []
    for pid in game.players:
        try:
            member = await context.bot.get_chat_member(cid, pid)
            uname = f"@{member.user.username}" if member.user.username else member.user.full_name
            names.append(uname)
        except Exception:
            continue

    await q.message.edit_text(
        "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(names),
        reply_markup=q.message.reply_markup
    )

async def send_next_question(context: ContextTypes.DEFAULT_TYPE, game: QuizGame):
    if game.current_q + 1 >= len(QUESTIONS):
        return await finish_quiz(context, game)

    text, options, correct_index = game.next_question()
    kb = [[InlineKeyboardButton(opt, callback_data=f"answer:{i}")] for i, opt in enumerate(options)]
    msg = await context.bot.send_message(
        game.chat_id,
        f"‚ùì –í–æ–ø—Ä–æ—Å {game.current_q + 1}:\n\n{text}",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    context.application.create_task(wait_answer_timeout(context, game, msg.message_id))

async def wait_answer_timeout(context: ContextTypes.DEFAULT_TYPE, game: QuizGame, message_id: int):
    await asyncio.sleep(15)
    if not game.answered:
        await context.bot.send_message(game.chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
        await send_next_question(context, game)

async def answer_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    user = q.from_user
    cid = q.message.chat.id
    data = q.data

    game = games.get(cid)
    if not game or not game.active or game.answered or user.id not in game.players:
        return await q.answer()

    idx = int(data.split(":")[1])
    _, _, correct = QUESTIONS[game.q_order[game.current_q]]
    game.answered = True

    if idx == correct:
        game.scores[user.id] += 1
        await q.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)
        await context.bot.send_message(cid, f"üéØ {user.full_name} –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ!")
    else:
        await q.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=True)
        await context.bot.send_message(cid, f"üôà {user.full_name} –æ—à–∏–±—Å—è.")

    await send_next_question(context, game)

async def finish_quiz(context: ContextTypes.DEFAULT_TYPE, game: QuizGame):
    winners = sorted(game.scores.items(), key=lambda x: x[1], reverse=True)
    best_score = winners[0][1]
    top_players = [uid for uid, score in winners if score == best_score]

    result_text = "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n"
    for uid in top_players:
        member = await context.bot.get_chat_member(game.chat_id, uid)
        uname = f"@{member.user.username}" if member.user.username else member.user.full_name
        result_text += f"- {uname}: {best_score} –æ—á–∫–æ–≤\n"

    await context.bot.send_message(game.chat_id, result_text)
    games.pop(game.chat_id, None)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

async def run_bot():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("quiz", start_quiz))
    app.add_handler(CallbackQueryHandler(join_cb, pattern="^join$"))
    app.add_handler(CallbackQueryHandler(answer_cb, pattern="^answer:"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(run_bot())
    
