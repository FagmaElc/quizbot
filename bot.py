import os
import random
import asyncio
from threading import Thread
from flask import Flask
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# --- Flask –¥–ª—è web ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –ë–æ—Ç –∂–∏–≤—ë—Ç!"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)

# --- –î–∞–Ω–Ω—ã–µ ---
chat_members = {}
chat_ids = set()
auto_posting_enabled = {}

pharma_tasks = [
    "–ü–∞—Ü–∏–µ–Ω—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–ø–∞—Ä–∞—Ç –ê. –ö–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã?",
    "–ö–∞–∫–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è —É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ë?",
    "–ß—Ç–æ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ –ø—Ä–∏—ë–º–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –í?",
    "–û–ø–∏—à–∏—Ç–µ —Ñ–∞—Ä–º–∞–∫–æ–∫–∏–Ω–µ—Ç–∏–∫—É –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –ì."
]

user_added_tasks = []

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å —Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ø–æ —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏.\n"
        "–ù–∞–ø–∏—à–∏ /task, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É."
    )

async def track_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user

    if chat_id not in chat_members:
        chat_members[chat_id] = {}

    chat_members[chat_id][user.id] = {
        "id": user.id,
        "username": f"@{user.username}" if user.username else user.full_name,
        "first_name": user.first_name,
    }
    chat_ids.add(chat_id)

async def send_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    members = list(chat_members.get(chat_id, {}).values())

    if not members:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –≤–∏–∂—É –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª.")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞—á—É
    user = random.choice(members)
    tasks_pool = pharma_tasks + user_added_tasks
    task = random.choice(tasks_pool)

    message = f"ü©∫ –ó–∞–¥–∞—á–∞ –¥–ª—è {user['username']}:\n\n{task}"
    await update.message.reply_text(message)

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó –ü—Ä–∏–º–µ—Ä: /addtask –û–ø–∏—à–∏—Ç–µ –º–µ—Ö–∞–Ω–∏–∑–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ X")
        return
    task = " ".join(context.args)
    user_added_tasks.append(task)
    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def auto_post(app):
    await asyncio.sleep(10)
    while True:
        for chat_id in chat_ids:
            if not auto_posting_enabled.get(chat_id, True):
                continue
            members = list(chat_members.get(chat_id, {}).values())
            if members:
                user = random.choice(members)
                task = random.choice(pharma_tasks + user_added_tasks)
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ê–≤—Ç–æ–∑–∞–¥–∞—á–∞ –¥–ª—è {user['username']}:\n\n{task}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–∑–∞–¥–∞—á–∏ –≤ —á–∞—Ç {chat_id}: {e}")
        await asyncio.sleep(3600)  # –∫–∞–∂–¥—ã–π —á–∞—Å

async def disable_autopost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    auto_posting_enabled[chat_id] = False
    await update.message.reply_text("üîï –ê–≤—Ç–æ–∑–∞–¥–∞—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

async def enable_autopost(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    auto_posting_enabled[chat_id] = True
    await update.message.reply_text("üîî –ê–≤—Ç–æ–∑–∞–¥–∞—á–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ /test —Å—Ä–∞–±–æ—Ç–∞–ª–∞!")

def main():
    Thread(target=run_flask).start()

    TOKEN = os.environ["BOT_TOKEN"]
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("task", send_task))
    app.add_handler(CommandHandler("addtask", add_task))
    app.add_handler(CommandHandler("disable_autopost", disable_autopost))
    app.add_handler(CommandHandler("enable_autopost", enable_autopost))
    app.add_handler(CommandHandler("test", test))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, track_user))

    async def after_startup(app):
        asyncio.create_task(auto_post(app))

    print("üß™ –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(post_init=after_startup)

if __name__ == "__main__":
    main()
