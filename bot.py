import os
import asyncio
import random
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –£—Å—Ç–∞–Ω–æ–≤–∏ BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render

questions = [ ... ]  # –¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –≤–æ–ø—Ä–æ—Å–æ–≤: (—Ç–µ–∫—Å—Ç, [–æ–ø—Ü–∏–∏], –∏–Ω–¥–µ–∫—Å_–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ)

games = {}  # chat_id -> –∏–≥—Ä–∞

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    if chat_id not in games:
        games[chat_id] = {
            "players": {},
            "questions": random.sample(questions, len(questions)),
            "current_q_index": 0,
            "started": False,
            "answers": {},
        }
    game = games[chat_id]
    if game["started"]:
        return await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç.")
    if user.id in game["players"]:
        return await update.message.reply_text(f"{user.first_name}, –≤—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")
    game["players"][user.id] = {"score": 0}
    await update.message.reply_text(f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = games.get(chat_id)
    if not game or not game["players"]:
        return await update.message.reply_text("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ /join")
    if game["started"]:
        return await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
    game["started"] = True
    game["current_q_index"] = 0
    await send_question_all(context, chat_id)

async def send_question_all(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    game = games[chat_id]
    idx = game["current_q_index"]
    if idx >= len(game["questions"]):
        return await show_results(context, chat_id)

    qtext, opts, correct_idx = game["questions"][idx]
    game["answers"] = {}

    kb_rows = [
        [InlineKeyboardButton(opt, callback_data=f"{uid}:{i}")]
        for i, opt in enumerate(opts)
        for uid in [None]  # trick to flatten
    ]
    for uid in game["players"]:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton(opt, callback_data=f"{uid}:{i}") for i, opt in enumerate(opts)]
        ])
        await context.bot.send_message(uid, f"–í–æ–ø—Ä–æ—Å {idx+1}: {qtext}\n30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç.", reply_markup=kb)

    asyncio.create_task(question_timeout(context, chat_id, idx))

async def question_timeout(context: ContextTypes.DEFAULT_TYPE, chat_id: int, idx: int):
    await asyncio.sleep(30)
    game = games.get(chat_id)
    if not game or game["current_q_index"] != idx:
        return
    for uid in game["players"]:
        if uid not in game["answers"]:
            await context.bot.send_message(uid, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –±–∞–ª–ª—ã –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω—ã.")
    game["current_q_index"] += 1
    await send_question_all(context, chat_id)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid_str, sel = q.data.split(":")
    uid = int(uid_str); sel = int(sel)
    if uid != q.from_user.id:
        return await q.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", show_alert=True)

    chat_id = next(cid for cid, g in games.items() if uid in g["players"])
    game = games[chat_id]
    idx = game["current_q_index"]
    _, _, correct_idx = game["questions"][idx]
    if uid in game["answers"]:
        return await q.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏.", show_alert=True)

    if sel == correct_idx:
        game["players"][uid]["score"] += 1
        await q.edit_message_text(q.message.text + "\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π!")
    else:
        await q.edit_message_text(q.message.text + "\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    game["answers"][uid] = True

    if len(game["answers"]) == len(game["players"]):
        game["current_q_index"] += 1
        await send_question_all(context, chat_id)

async def show_results(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    game = games[chat_id]
    items = sorted(game["players"].items(), key=lambda x: x[1]["score"], reverse=True)
    text = "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n" + "\n".join(
        f"{await context.bot.get_chat(uid).first_name}: {data['score']} –±–∞–ª–ª–æ–≤"
        for uid, data in items
    )
    text += f"\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {await context.bot.get_chat(items[0][0]).first_name}"
    await context.bot.send_message(chat_id, text)
    del games[chat_id]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /join –≤ –≥—Ä—É–ø–ø–µ, –∑–∞—Ç–µ–º /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CommandHandler("quiz", start_quiz))
    app.add_handler(CallbackQueryHandler(button))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
