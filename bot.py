import os
import random
import asyncio
from threading import Thread

from flask import Flask, request, abort
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler

TOKEN = os.getenv("TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN:
    raise RuntimeError("TOKEN environment variable not set")

bot = Bot(token=TOKEN)
app = Flask(__name__)

# –í–æ–ø—Ä–æ—Å—ã
QUESTIONS = [
    ("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ú–∞–¥—Ä–∏–¥"], 0),
    # ... (—Ç–≤–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤) ...
    ("–°–∫–æ–ª—å–∫–æ —É—à–µ–π —É —á–µ–ª–æ–≤–µ–∫–∞?", ["1", "2", "3", "4"], 1),
]

class QuizGame:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.players = set()
        self.scores = {}
        self.current_q = -1
        self.q_order = random.sample(range(len(QUESTIONS)), 30)
        self.active = False
        self.answered = False
        self.message_id = None

    def add_player(self, user_id):
        self.players.add(user_id)
        self.scores.setdefault(user_id, 0)

    def next_question(self):
        self.current_q += 1
        self.answered = False
        if self.current_q >= 30:
            return None
        return QUESTIONS[self.q_order[self.current_q]]

games = {}

dispatcher = Dispatcher(bot, None, workers=0, use_context=True)  # workers=0 ‚Äî —á—Ç–æ–±—ã sync

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===

def start_quiz(update, context):
    chat = update.effective_chat
    if chat.type not in ("group", "supergroup"):
        update.message.reply_text("–ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if chat.id in games and games[chat.id].active:
        update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
        return

    game = QuizGame(chat.id)
    games[chat.id] = game

    kb = [[InlineKeyboardButton("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]]
    update.message.reply_text(
        "–ù–∞–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –ò–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (asyncio –≤ Flask –±–µ–∑ loop –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    def wait_and_start():
        asyncio.run(wait_and_start_async(context, game))

    Thread(target=wait_and_start).start()

async def wait_and_start_async(context, game):
    await asyncio.sleep(30)
    chat_id = game.chat_id

    if not game.players:
        await bot.send_message(chat_id, "–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        games.pop(chat_id, None)
        return

    game.active = True
    await bot.send_message(chat_id, f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–æ–ø—Ä–æ—Å–æ–≤: 30. –£–¥–∞—á–∏!")
    await send_next_question(bot, game)

async def send_next_question(bot, game):
    qdata = game.next_question()
    if qdata is None:
        await finish_quiz(bot, game)
        return

    text, options, correct = qdata
    kb = [[InlineKeyboardButton(opt, callback_data=f"answer:{i}")] for i, opt in enumerate(options)]
    msg = await bot.send_message(game.chat_id, f"–í–æ–ø—Ä–æ—Å {game.current_q + 1}: {text}",
                                 reply_markup=InlineKeyboardMarkup(kb))
    game.message_id = msg.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    async def timeout():
        await asyncio.sleep(15)
        if not game.answered:
            await bot.send_message(game.chat_id, "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!")
            await send_next_question(bot, game)

    asyncio.create_task(timeout())

def join_cb(update, context):
    q = update.callback_query
    q.answer()

    user = q.from_user
    cid = q.message.chat.id

    game = games.get(cid)
    if not game:
        q.message.reply_text("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if game.active:
        q.answer("–ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –∏–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!", show_alert=True)
        return

    if user.id in game.players:
        q.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
        return

    game.add_player(user.id)

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    names = []
    for pid in game.players:
        try:
            member = bot.get_chat_member(cid, pid)
            names.append(member.user.full_name or member.user.username or "Unknown")
        except:
            names.append("Unknown")

    text = "üéØ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(names)
    bot.send_message(cid, text)

def answer_cb(update, context):
    q = update.callback_query
    q.answer()

    uid = q.from_user.id
    cid = q.message.chat.id

    game = games.get(cid)
    if not game or not game.active:
        q.answer("–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    if uid not in game.players:
        q.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.", show_alert=True)
        return

    if game.answered:
        q.answer("–í–æ–ø—Ä–æ—Å —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω.", show_alert=True)
        return

    idx = int(q.data.split(":")[1])
    _, _, correct = QUESTIONS[game.q_order[game.current_q]]

    game.answered = True
    if idx == correct:
        game.scores[uid] += 1
        q.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)
        bot.send_message(cid, f"{q.from_user.full_name} –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ!")
    else:
        q.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=True)
        bot.send_message(cid, f"{q.from_user.full_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å asyncio
    def next_q():
        asyncio.run(send_next_question(bot, game))
    Thread(target=next_q).start()

async def finish_quiz(bot, game):
    if not game.scores:
        await bot.send_message(game.chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        games.pop(game.chat_id, None)
        return

    winners = sorted(game.scores.items(), key=lambda x: x[1], reverse=True)
    best_score = winners[0][1]
    winners_list = [uid for uid, sc in winners if sc == best_score]

    text = "üèÜ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n"
    for uid in winners_list:
        try:
            member = await bot.get_chat_member(game.chat_id, uid)
            name = member.user.full_name or member.user.username or "Unknown"
        except Exception:
            name = "Unknown"
        text += f"- {name} ‚Äî {game.scores[uid]} –æ—á–∫–æ–≤\n"

    await bot.send_message(game.chat_id, text)
    games.pop(game.chat_id, None)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
dispatcher.add_handler(CommandHandler("quiz", start_quiz))
dispatcher.add_handler(CallbackQueryHandler(join_cb, pattern="^join$"))
dispatcher.add_handler(CallbackQueryHandler(answer_cb, pattern="^answer:\d$"))

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), bot)
        dispatcher.process_update(update)
        return "OK"
    else:
        abort(405)

@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

if __name__ == "__main__":
    # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–∞ Render —É–∫–∞–∂–∏ WEBHOOK_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # https://yourdomain.com/<TOKEN>
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    if not WEBHOOK_URL:
        print("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ webhook")
        app.run(port=5000)
    else:
        bot.delete_webhook()
        bot.set_webhook(WEBHOOK_URL)
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", "5000")))
