import os
import random
import asyncio
from threading import Thread

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# --- Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–ë–∞–±–∞ –ú–∞–Ω—è –∂–∏–≤—ë—Ç üîÆ"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)

# --- –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
QUESTIONS = [
    ("–ö–∞–∫–æ–π —è–∑—ã–∫ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤ –≤–µ–±–µ?", ["HTML", "Python", "C++", "CSS"], 0),
    ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2 * 2?", ["4", "6", "8", "2"], 1),
    ("–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è –∫–∞–∫ 'O'?", ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–ó–æ–ª–æ—Ç–æ", "–û–ª–æ–≤–æ", "–û—Å–º–∏–π"], 0),
    ("–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π", "–¢–∏—Ö–∏–π"], 3),
    ("–ö–∞–∫ –∑–æ–≤—É—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è Facebook?", ["–°—Ç–∏–≤ –î–∂–æ–±—Å", "–ë–∏–ª–ª –ì–µ–π—Ç—Å", "–ú–∞—Ä–∫ –¶—É–∫–µ—Ä–±–µ—Ä–≥", "–ò–ª–æ–Ω –ú–∞—Å–∫"], 2),
    ("–°–∫–æ–ª—å–∫–æ –Ω–æ–≥ —É –ø–∞—É–∫–∞?", ["6", "8", "10", "12"], 1),
    ("–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?", ["–ó–µ–º–ª—è", "–í–µ–Ω–µ—Ä–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å"], 2),
    ("–ß—Ç–æ —Ç—è–∂–µ–ª–µ–µ: –∫–∏–ª–æ–≥—Ä–∞–º–º –ø—É—Ö–∞ –∏–ª–∏ –∫–∏–ª–æ–≥—Ä–∞–º–º –∂–µ–ª–µ–∑–∞?", ["–ü—É—Ö", "–ñ–µ–ª–µ–∑–æ", "–û–¥–∏–Ω–∞–∫–æ–≤–æ", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä—ë–º–∞"], 2),
    ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–†–∏–º", "–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω"], 2),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?", ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ü—É—à–∫–∏–Ω", "–ß–µ—Ö–æ–≤"], 1),
    ("–ß–µ–º—É —Ä–∞–≤–µ–Ω –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ 5?", ["10", "15", "25", "30"], 2),
    ("–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª –∂–∏–¥–∫–∏–π –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ?", ["–ñ–µ–ª–µ–∑–æ", "–ú–µ—Ä–∫—É—Ä–∏–π", "–¶–∏–Ω–∫", "–ú–µ–¥—å"], 1),
    ("–ö–∞–∫ –∑–æ–≤—É—Ç –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞?", ["–ì–∞—Ä—Ä–∏", "–†–æ–Ω", "–ì–µ—Ä–º–∏–æ–Ω–∞", "–î—Ä–∞–∫–æ"], 0),
    ("–ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ—Ä–º–æ–º–µ—Ç—Ä?", ["–î–∞–≤–ª–µ–Ω–∏–µ", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "–°–∫–æ—Ä–æ—Å—Ç—å"], 1),
    ("–°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?", ["42", "44", "46", "48"], 2),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –º—É–∑—ã–∫—É –∫ –±–∞–ª–µ—Ç—É '–õ–µ–±–µ–¥–∏–Ω–æ–µ –æ–∑–µ—Ä–æ'?", ["–ú–æ—Ü–∞—Ä—Ç", "–ß–∞–π–∫–æ–≤—Å–∫–∏–π", "–ë–µ—Ç—Ö–æ–≤–µ–Ω", "–®–æ–ø–µ–Ω"], 1),
    ("–ß—Ç–æ –∏–∑–º–µ—Ä—è–µ—Ç –ª–∏–Ω–µ–π–∫–∞?", ["–í–µ—Å", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É", "–î–ª–∏–Ω—É", "–û–±—ä—ë–º"], 2),
    ("–ö–∞–∫–æ–π –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", ["–ê—Ñ—Ä–∏–∫–∞", "–ê–∑–∏—è", "–ï–≤—Ä–æ–ø–∞", "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞"], 1),
    ("–ö–∞–∫–∞—è –ø—Ç–∏—Ü–∞ –Ω–µ —É–º–µ–µ—Ç –ª–µ—Ç–∞—Ç—å?", ["–ì–æ–ª—É–±—å", "–í–æ—Ä–æ–±–µ–π", "–ü–∏–Ω–≥–≤–∏–Ω", "–°–æ–≤–∞"], 2),
    ("–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö?", ["Python", "HTML", "C#", "Java"], 0),
    ("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö?", ["12", "24", "48", "60"], 1),
    ("–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞–∫ '–∫—Ä–∞—Å–Ω–∞—è'?", ["–Æ–ø–∏—Ç–µ—Ä", "–ú–∞—Ä—Å", "–í–µ–Ω–µ—Ä–∞", "–°–∞—Ç—É—Ä–Ω"], 1),
    ("–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ?", ["–°–ª–æ–Ω", "–ê–∫—É–ª–∞", "–ì–æ–ª—É–±–æ–π –∫–∏—Ç", "–ñ–∏—Ä–∞—Ñ"], 2),
    ("–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—Ä–æ–Ω —É —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞?", ["2", "3", "4", "5"], 1),
    ("–ö–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ —Å–∏–Ω–µ–≥–æ –∏ –∂—ë–ª—Ç–æ–≥–æ?", ["–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–ó–µ–ª—ë–Ω—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π"], 1),
    ("–ö—Ç–æ –∞–≤—Ç–æ—Ä '–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏—è'?", ["–¢–æ–ª—Å—Ç–æ–π", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ì–æ–≥–æ–ª—å", "–¢—É—Ä–≥–µ–Ω–µ–≤"], 1),
    ("–ö–∞–∫–æ–π –≥–∞–∑ –º—ã –≤–¥—ã—Ö–∞–µ–º –∏–∑ –≤–æ–∑–¥—É—Ö–∞?", ["–ê–∑–æ—Ç", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "–ì–µ–ª–∏–π"], 1),
    ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", ["–¢–æ–∫–∏–æ", "–ü–µ–∫–∏–Ω", "–°–µ—É–ª", "–û—Å–∞–∫–∞"], 0),
    ("–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∏–º–≤–æ–ª –†–æ—Å—Å–∏–∏?", ["–û—Ä–µ–ª", "–í–æ–ª–∫", "–ú–µ–¥–≤–µ–¥—å", "–¢–∏–≥—Ä"], 2),
    ("–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫—Ä–æ–≤–∏?", ["–ü–µ—á–µ–Ω—å", "–ü–æ—á–∫–∏", "–°–µ—Ä–¥—Ü–µ", "–õ—ë–≥–∫–∏–µ"], 2),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞'?", ["–°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥", "–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥", "–¢–æ–ª–∫–∏–Ω", "–õ—å—é–∏—Å"], 1),
    ("–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ 99?", ["100", "101", "98", "102"], 0),
    ("–ö–∞–∫–∞—è –≤–∞–ª—é—Ç–∞ –≤ –Ø–ø–æ–Ω–∏–∏?", ["–Æ–∞–Ω—å", "–í–æ–Ω", "–ò–µ–Ω–∞", "–ë–∞—Ç"], 2),
    ("–ö–∞–∫–æ–π –æ—Ä–≥–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ?", ["–°–µ—Ä–¥—Ü–µ", "–õ—ë–≥–∫–∏–µ", "–ñ–µ–ª—É–¥–æ–∫", "–ü–µ—á–µ–Ω—å"], 1),
    ("–ö–∞–∫–æ–π –º–∞—Ç–µ—Ä–∏–∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ —é–∂–Ω–æ–º –ø–æ–ª—é—Å–µ?", ["–ê—Ñ—Ä–∏–∫–∞", "–ê–≤—Å—Ç—Ä–∞–ª–∏—è", "–ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞", "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞"], 2),
    ("–ö–∞–∫ –∑–æ–≤—É—Ç –ª—É—á—à–µ–≥–æ –¥—Ä—É–≥–∞ –®—Ä–µ–∫–∞?", ["–û—Å—ë–ª", "–ö–æ—Ç", "–î—Ä–∞–∫–æ–Ω", "–ü–∏–Ω–æ–∫–∫–∏–æ"], 0),
    ("–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫?", ["–ù–∞–≥—Ä–µ–≤–∞–µ—Ç", "–û—Å–≤–µ—â–∞–µ—Ç", "–û—Ö–ª–∞–∂–¥–∞–µ—Ç", "–°—É—à–∏—Ç"], 2),
    ("–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –∫–æ—Å–º–æ—Å–µ?", ["–ì–∞–≥–∞—Ä–∏–Ω", "–ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "–¢–∏—Ç–æ–≤", "–ö–æ–ª—É–º–±"], 0),
    ("–ö–∞–∫–æ–π —Ü–≤–µ—Ç —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –ª—é–±–æ–≤—å?", ["–°–∏–Ω–∏–π", "–ö—Ä–∞—Å–Ω—ã–π", "–ó–µ–ª—ë–Ω—ã–π", "–ß—ë—Ä–Ω—ã–π"], 1),
    ("–°–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É?", ["10", "11", "12", "13"], 2),
    ("–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏?", ["–ö–∞–Ω–∞–¥–∞", "–°–®–ê", "–ö–∏—Ç–∞–π", "–†–æ—Å—Å–∏—è"], 3),
    ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞—É–∫–∞ –æ —á–∏—Å–ª–∞—Ö?", ["–§–∏–∑–∏–∫–∞", "–ë–∏–æ–ª–æ–≥–∏—è", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–•–∏–º–∏—è"], 2),
    ("–ö–∞–∫ –∑–æ–≤—É—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –∏–≥—Ä–µ Minecraft?", ["–°—Ç–∏–≤", "–ê–ª–µ–∫—Å", "–ú–∞—Ä–∫", "–î–∂–æ–Ω"], 0),
    ("–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî —Ñ—Ä—É–∫—Ç?", ["–ú–æ—Ä–∫–æ–≤—å", "–Ø–±–ª–æ–∫–æ", "–ö–∞–ø—É—Å—Ç–∞", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å"], 1),
    ("–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî –ø–ª–∞–Ω–µ—Ç–∞?", ["–°–æ–ª–Ω—Ü–µ", "–õ—É–Ω–∞", "–ú–∞—Ä—Å", "–ö–æ–º–µ—Ç–∞"], 2),
    ("–°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ '–∞—Ä–±—É–∑'?", ["4", "5", "6", "7"], 1),
    ("–ö–∞–∫–∞—è —Ñ–∏–≥—É—Ä–∞ –∏–º–µ–µ—Ç 4 —Å—Ç–æ—Ä–æ–Ω—ã?", ["–ö—Ä—É–≥", "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", "–ö–≤–∞–¥—Ä–∞—Ç", "–ü—è—Ç–∏—É–≥–æ–ª—å–Ω–∏–∫"], 2),
    ("–ö–∞–∫–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è 1 —è–Ω–≤–∞—Ä—è?", ["–†–æ–∂–¥–µ—Å—Ç–≤–æ", "–°—Ç–∞—Ä—ã–π –ù–æ–≤—ã–π –≥–æ–¥", "–ù–æ–≤—ã–π –≥–æ–¥", "–ü–∞—Å—Ö–∞"], 2)
]
# --- –ö–ª–∞—Å—Å –∏–≥—Ä—ã ---
class QuizGame:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.players = []
        self.scores = {}
        self.current_q = -1
        self.q_order = random.sample(range(len(QUESTIONS)), len(QUESTIONS))
        self.active = False
        self.answered = False

    def add_player(self, user_id):
        if user_id not in self.players:
            self.players.append(user_id)
            self.scores[user_id] = 0

    def next_question(self):
        self.current_q += 1
        self.answered = False
        q_index = self.q_order[self.current_q]
        return QUESTIONS[q_index]

games = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.id in games and games[chat.id].active:
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat.id] = QuizGame(chat.id)

    kb = [[InlineKeyboardButton("üë§ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]]
    await update.message.reply_text(
        "üéÆ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    await asyncio.sleep(30)
    game = games.get(chat.id)
    if not game or len(game.players) < 1:
        await context.bot.send_message(chat.id, "‚èπÔ∏è –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        games.pop(chat.id, None)
        return

    game.active = True
    await context.bot.send_message(chat.id, f"üöÄ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—Å–µ–≥–æ {len(QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await send_next_question(context, game)

async def join_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user = q.from_user
    cid = q.message.chat.id

    game = games.get(cid)
    if not game or game.active:
        return await q.answer("üö´ –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")

    if user.id in game.players:
        return await q.answer("‚úÖ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    game.add_player(user.id)
    await q.answer("üéâ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")

    names = []
    for pid in game.players:
        try:
            member = await context.bot.get_chat_member(cid, pid)
            uname = f"@{member.user.username}" if member.user.username else member.user.full_name
            names.append(uname)
        except Exception:
            continue

    await q.message.edit_text(
        "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(names),
        reply_markup=q.message.reply_markup
    )

async def send_next_question(context: ContextTypes.DEFAULT_TYPE, game: QuizGame):
    if game.current_q + 1 >= len(QUESTIONS):
        return await finish_quiz(context, game)

    text, options, correct_index = game.next_question()
    kb = [[InlineKeyboardButton(opt, callback_data=f"answer:{i}")] for i, opt in enumerate(options)]
    msg = await context.bot.send_message(
        game.chat_id,
        f"‚ùì –í–æ–ø—Ä–æ—Å {game.current_q + 1}:\n\n{text}",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    context.application.create_task(wait_answer_timeout(context, game, msg.message_id))

async def wait_answer_timeout(context: ContextTypes.DEFAULT_TYPE, game: QuizGame, message_id: int):
    await asyncio.sleep(15)
    if not game.answered:
        await context.bot.send_message(game.chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
        await send_next_question(context, game)

async def answer_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    user = q.from_user
    cid = q.message.chat.id
    data = q.data

    game = games.get(cid)
    if not game or not game.active or game.answered or user.id not in game.players:
        return await q.answer()

    idx = int(data.split(":")[1])
    _, _, correct = QUESTIONS[game.q_order[game.current_q]]
    game.answered = True

    if idx == correct:
        game.scores[user.id] += 1
        await q.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)
        await context.bot.send_message(cid, f"üéØ {user.full_name} –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ!")
    else:
        await q.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=True)
        await context.bot.send_message(cid, f"üôà {user.full_name} –æ—à–∏–±—Å—è.")

    await send_next_question(context, game)

async def finish_quiz(context: ContextTypes.DEFAULT_TYPE, game: QuizGame):
    winners = sorted(game.scores.items(), key=lambda x: x[1], reverse=True)
    best_score = winners[0][1]
    top_players = [uid for uid, score in winners if score == best_score]

    result_text = "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n"
    for uid in top_players:
        member = await context.bot.get_chat_member(game.chat_id, uid)
        uname = f"@{member.user.username}" if member.user.username else member.user.full_name
        result_text += f"- {uname}: {best_score} –æ—á–∫–æ–≤\n"

    await context.bot.send_message(game.chat_id, result_text)
    games.pop(game.chat_id, None)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

async def run_bot():
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("quiz", start_quiz))
    app.add_handler(CallbackQueryHandler(join_cb, pattern="^join$"))
    app.add_handler(CallbackQueryHandler(answer_cb, pattern="^answer:"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

def start_bot():
    asyncio.run(run_bot())

if __name__ == "__main__":
    Thread(target=run_flask).start()
    Thread(target=start_bot).start()
