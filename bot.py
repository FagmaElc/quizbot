import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)

# ‚úÖ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å–æ–∫—Ä–∞—â—ë–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
QUESTIONS = [
    ("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω", "–ú–∞–¥—Ä–∏–¥"], 0),
    ("–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º 'O'?", ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–ó–æ–ª–æ—Ç–æ", "–£–≥–ª–µ—Ä–æ–¥", "–ê–∑–æ—Ç"], 0),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'?", ["–ü—É—à–∫–∏–Ω", "–¢–æ–ª—Å—Ç–æ–π", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ß–µ—Ö–æ–≤"], 1),
("–°—Ç–æ–ª–∏—Ü–∞ –ì–µ—Ä–º–∞–Ω–∏–∏?", ["–ë–µ—Ä–ª–∏–Ω", "–ú—é–Ω—Ö–µ–Ω", "–§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç", "–ì–∞–º–±—É—Ä–≥"], 0),
    ("–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º 'O'?", ["–ö–∏—Å–ª–æ—Ä–æ–¥", "–ó–æ–ª–æ—Ç–æ", "–£–≥–ª–µ—Ä–æ–¥", "–ê–∑–æ—Ç"], 0),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'?", ["–ü—É—à–∫–∏–Ω", "–¢–æ–ª—Å—Ç–æ–π", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–ß–µ—Ö–æ–≤"], 1),
    ("–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", ["7", "8", "9", "10"], 1),
    ("–°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ?", ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–Ø–Ω—Ü–∑—ã", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"], 0),
    ("–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–∞–∑—ã–≤–∞—é—Ç –ë–æ–ª—å—à–∏–º –Ø–±–ª–æ–∫–æ–º?", ["–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å", "–ß–∏–∫–∞–≥–æ", "–ù—å—é-–ô–æ—Ä–∫", "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ"], 2),
    ("–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ä–∞—Å–ø–∞–ª—Å—è –°–°–°–†?", ["1991", "1989", "1993", "1990"], 0),
    ("–°–∫–æ–ª—å–∫–æ —Ö—Ä–æ–º–æ—Å–æ–º —É —á–µ–ª–æ–≤–µ–∫–∞?", ["46", "44", "48", "42"], 0),
    ("–ö—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–ª '–ú–æ–Ω—É –õ–∏–∑—É'?", ["–í–∞–Ω –ì–æ–≥", "–ü–∏–∫–∞—Å—Å–æ", "–î–∞ –í–∏–Ω—á–∏", "–†–µ–º–±—Ä–∞–Ω–¥—Ç"], 2),
    ("–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª —Å–∞–º—ã–π –ª—ë–≥–∫–∏–π?", ["–ê–ª—é–º–∏–Ω–∏–π", "–ñ–µ–ª–µ–∑–æ", "–õ–∏—Ç–∏–π", "–ú–µ–¥—å"], 2),
    ("–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–∞–π—Ç–æ–≤?", ["Python", "HTML", "C++", "Java"], 1),
    ("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ —Å—É—Ç–∫–∞—Ö?", ["24", "12", "36", "48"], 0),
    ("–°–∫–æ–ª—å–∫–æ –Ω–æ–≥ —É –ø–∞—É–∫–∞?", ["6", "8", "10", "12"], 1),
    ("–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", ["–û—Å–∞–∫–∞", "–¢–æ–∫–∏–æ", "–ö–∏–æ—Ç–æ", "–ù–∞–≥–æ—è"], 1),
    ("–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–¢–∏—Ö–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π"], 2),
    ("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫—Ä–∞—Å–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞?", ["–Æ–ø–∏—Ç–µ—Ä", "–ú–∞—Ä—Å", "–ú–µ—Ä–∫—É—Ä–∏–π", "–°–∞—Ç—É—Ä–Ω"], 1),
    ("–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞'?", ["–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥", "–°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥", "–¢–æ–ª–∫–∏–Ω", "–•–µ–º–∏–Ω–≥—É—ç–π"], 0),
    ("–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É?", ["365", "364", "366", "367"], 2),
    ("–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏?", ["–ö–∞–Ω–∞–¥–∞", "–†–æ—Å—Å–∏—è", "–°–®–ê", "–ö–∏—Ç–∞–π"], 1),
    ("–ß—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ ‚Äî –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ?", ["–ö—É—Ä–∏—Ü–∞", "–ê–∫—É–ª–∞", "–ö–∏—Ç", "–ß–µ—Ä–µ–ø–∞—Ö–∞"], 2),
    ("–ö–∞–∫–æ–π –≥–∞–∑ –Ω—É–∂–µ–Ω –¥–ª—è –¥—ã—Ö–∞–Ω–∏—è?", ["–ê–∑–æ—Ç", "–ì–µ–ª–∏–π", "–ö–∏—Å–ª–æ—Ä–æ–¥", "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑"], 2),
    ("–°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è –≥–æ—Ä–∞ –º–∏—Ä–∞?", ["–ö–∏–ª–∏–º–∞–Ω–¥–∂–∞—Ä–æ", "–≠–ª—å–±—Ä—É—Å", "–ú–æ–Ω–±–ª–∞–Ω", "–≠–≤–µ—Ä–µ—Å—Ç"], 3),
    ("–ì–¥–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –û–ª–∏–º–ø–∏–π—Å–∫–∏–µ –∏–≥—Ä—ã 2024 –≥–æ–¥–∞?", ["–ü–∞—Ä–∏–∂", "–¢–æ–∫–∏–æ", "–ë–µ—Ä–ª–∏–Ω", "–†–∏–º"], 0),
    ("–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–µ—Ä–¥—Ü–µ?", ["–ü–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ", "–ö–∞—á–∞–µ—Ç –∫—Ä–æ–≤—å", "–§–∏–ª—å—Ç—Ä—É–µ—Ç", "–î—ã—à–∏—Ç"], 1),
    ("–ö—Ç–æ –æ—Ç–∫—Ä—ã–ª –ê–º–µ—Ä–∏–∫—É?", ["–ú–∞–≥–µ–ª–ª–∞–Ω", "–ö–æ–ª—É–º–±", "–ö—É–∫", "–í–∞—à–∏–Ω–≥—Ç–æ–Ω"], 1),
    ("–°–∫–æ–ª—å–∫–æ –º–∞—Ç–µ—Ä–∏–∫–æ–≤ –Ω–∞ –ó–µ–º–ª–µ?", ["5", "6", "7", "8"], 2),
    ("–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è?", ["–ë–µ—Ä–ª–∏–Ω", "–†–∏–º", "–õ–æ–Ω–¥–æ–Ω", "–ü–∞—Ä–∏–∂"], 3),
    ("–ö–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ —Å–∏–Ω–µ–≥–æ –∏ –∂—ë–ª—Ç–æ–≥–æ?", ["–ó–µ–ª—ë–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π", "–ö—Ä–∞—Å–Ω—ã–π"], 0),
    ("–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤ –∫–æ—Å–º–æ—Å–µ?", ["–ê—Ä–º—Å—Ç—Ä–æ–Ω–≥", "–ì–∞–≥–∞—Ä–∏–Ω", "–¢–∏—Ç–æ–≤", "–ö–æ—Ä–æ–ª—ë–≤"], 1),
    ("–°–∫–æ–ª—å–∫–æ —É—à–µ–π —É —á–µ–ª–æ–≤–µ–∫–∞?", ["1", "2", "3", "4"], 1),
    # ... –¥–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ 30!
]

assert len(QUESTIONS) >= 30, "‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 30 –≤–æ–ø—Ä–æ—Å–æ–≤!"

class QuizGame:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.players = set()
        self.scores = {}
        self.current_q = -1
        self.q_order = random.sample(range(len(QUESTIONS)), 30)
        self.active = False
        self.answered = False

    def add_player(self, user_id):
        self.players.add(user_id)
        self.scores.setdefault(user_id, 0)

    def next_question(self):
        self.current_q += 1
        self.answered = False
        return QUESTIONS[self.q_order[self.current_q]]

games = {}

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in ("group", "supergroup"):
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    if chat.id in games and games[chat.id].active:
        await update.message.reply_text("‚ùó –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
        return

    games[chat.id] = QuizGame(chat.id)
    kb = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join")]]
    await update.message.reply_text(
        "üéØ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è. –£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥!",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    await asyncio.sleep(30)
    game = games.get(chat.id)
    if not game or len(game.players) < 1:
        await context.bot.send_message(chat.id, "‚èπ –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        games.pop(chat.id, None)
        return

    game.active = True
    await context.bot.send_message(chat.id, f"üöÄ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –í—Å–µ–≥–æ 30 –≤–æ–ø—Ä–æ—Å–æ–≤.")
    await send_next_question(context, game)

async def join_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    user = q.from_user
    cid = q.message.chat.id

    game = games.get(cid)
    if not game or game.active:
        return await q.answer("üö´ –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞!")

    if user.id in game.players:
        return await q.answer("‚úÖ –í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")

    game.add_player(user.id)
    await q.answer("üéâ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")

    names = []
    for pid in game.players:
        try:
            member = await context.bot.get_chat_member(cid, pid)
            uname = f"@{member.user.username}" if member.user.username else member.user.full_name
            names.append(uname)
        except:
            continue

    await q.message.edit_text(
        "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join(names),
        reply_markup=q.message.reply_markup
    )

async def send_next_question(context, game: QuizGame):
    if game.current_q + 1 >= 30:
        return await finish_quiz(context, game)

    text, opts, correct = game.next_question()
    kb = [[InlineKeyboardButton(opt, callback_data=f"answer:{i}")] for i, opt in enumerate(opts)]
    msg = await context.bot.send_message(
        game.chat_id,
        f"‚ùì –í–æ–ø—Ä–æ—Å {game.current_q + 1}:\n\n{text}",
        reply_markup=InlineKeyboardMarkup(kb)
    )

    # –ê–≤—Ç–æ-–ø—Ä–æ–ø—É—Å–∫ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
    context.application.create_task(wait_answer_timeout(context, game, msg.message_id))

async def wait_answer_timeout(context, game: QuizGame, message_id):
    await asyncio.sleep(15)
    if not game.answered:
        await context.bot.send_message(game.chat_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.")
        await send_next_question(context, game)

async def answer_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    user = q.from_user
    cid = q.message.chat.id
    data = q.data

    game = games.get(cid)
    if not game or not game.active or game.answered or user.id not in game.players:
        return await q.answer()

    idx = int(data.split(":")[1])
    _, _, correct = QUESTIONS[game.q_order[game.current_q]]
    game.answered = True

    if idx == correct:
        game.scores[user.id] += 1
        await q.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", show_alert=True)
        await context.bot.send_message(cid, f"üéØ {user.full_name} –ø–æ–ª—É—á–∞–µ—Ç 1 –æ—á–∫–æ!")
    else:
        await q.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=True)
        await context.bot.send_message(cid, f"üôà {user.full_name} –æ—à–∏–±—Å—è.")

    await send_next_question(context, game)

async def finish_quiz(context, game: QuizGame):
    winners = sorted(game.scores.items(), key=lambda x: x[1], reverse=True)
    best_score = winners[0][1]
    top_players = [uid for uid, score in winners if score == best_score]

    result_text = "üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n"
    for uid in top_players:
        member = await context.bot.get_chat_member(game.chat_id, uid)
        uname = f"@{member.user.username}" if member.user.username else member.user.full_name
        result_text += f"- {uname}: {best_score} –æ—á–∫–æ–≤\n"

    await context.bot.send_message(game.chat_id, result_text)
    games.pop(game.chat_id, None)

def main():
    TOKEN = "7630074850:AAFUMyj-EYzvWjBoHdymTB8Fdemk7KbIcAY"
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("quiz", start_quiz))
    app.add_handler(CallbackQueryHandler(join_cb, pattern="^join$"))
    app.add_handler(CallbackQueryHandler(answer_cb, pattern="^answer:"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
