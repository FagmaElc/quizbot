import os
import random
import asyncio
import threading
from flask import Flask
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è UptimeRobot ping
web_app = Flask(__name__)

@web_app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –í–æ–ø—Ä–æ—Å—ã
questions = [
    ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?", ["3", "4", "5", "6"], 1),
    ("–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", ["–ë–µ—Ä–ª–∏–Ω", "–õ–æ–Ω–¥–æ–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º"], 2),
    ("–ö–∞–∫–æ–π —è–∑—ã–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º?", ["Java", "C++", "Python", "Ruby"], 2),
    # –î–æ–±–∞–≤—å —Å–≤–æ–∏ 27+ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
]

games = {}  # chat_id -> –∏–≥—Ä–∞

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /join —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.")

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    game = games.setdefault(chat_id, {
        "players": {},
        "questions": random.sample(questions, len(questions)),
        "current_q_index": 0,
        "started": False,
        "answers": {},
    })

    if game["started"]:
        await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")
        return

    if user.id not in game["players"]:
        game["players"][user.id] = {"score": 0}
        await update.message.reply_text(f"{user.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
    else:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")

async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    game = games.get(chat_id)

    if not game or not game["players"]:
        return await update.message.reply_text("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤. –í–≤–µ–¥–∏—Ç–µ /join")

    if game["started"]:
        return await update.message.reply_text("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.")

    game["started"] = True
    game["current_q_index"] = 0
    await send_question_all(context, chat_id)

async def send_question_all(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    game = games[chat_id]
    q_index = game["current_q_index"]
    if q_index >= len(game["questions"]):
        return await show_results(context, chat_id)

    q_text, options, correct_idx = game["questions"][q_index]
    game["answers"] = {}

    for user_id in game["players"]:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(opt, callback_data=f"{user_id}:{i}")]
            for i, opt in enumerate(options)
        ])
        try:
            await context.bot.send_message(user_id, f"–í–æ–ø—Ä–æ—Å {q_index + 1}: {q_text}", reply_markup=keyboard)
        except:
            pass  # –ò–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    asyncio.create_task(question_timeout(context, chat_id, q_index))

async def question_timeout(context: ContextTypes.DEFAULT_TYPE, chat_id: int, q_index: int):
    await asyncio.sleep(30)
    game = games.get(chat_id)
    if not game or game["current_q_index"] != q_index:
        return

    for user_id in game["players"]:
        if user_id not in game["answers"]:
            await context.bot.send_message(user_id, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω.")

    game["current_q_index"] += 1
    await send_question_all(context, chat_id)

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    uid_str, selected_str = query.data.split(":")
    user_id = int(uid_str)
    selected = int(selected_str)

    if query.from_user.id != user_id:
        return await query.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!", show_alert=True)

    chat_id = next((cid for cid, g in games.items() if user_id in g["players"]), None)
    if not chat_id:
        return await query.edit_message_text("–û—à–∏–±–∫–∞: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    game = games[chat_id]

    if user_id in game["answers"]:
        return await query.answer("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏.", show_alert=True)

    q_index = game["current_q_index"]
    _, options, correct_idx = game["questions"][q_index]

    if selected == correct_idx:
        game["players"][user_id]["score"] += 1
        await query.edit_message_text(query.message.text + "\n‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await query.edit_message_text(query.message.text + "\n‚ùå –ù–µ–≤–µ—Ä–Ω–æ!")

    game["answers"][user_id] = True

    if len(game["answers"]) == len(game["players"]):
        game["current_q_index"] += 1
        await send_question_all(context, chat_id)

async def show_results(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    game = games[chat_id]
    results = sorted(game["players"].items(), key=lambda x: x[1]["score"], reverse=True)
    text = "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n"
    for idx, (uid, data) in enumerate(results, start=1):
        user = await context.bot.get_chat(uid)
        text += f"{idx}. {user.first_name}: {data['score']} –±–∞–ª–ª–æ–≤\n"
    winner = await context.bot.get_chat(results[0][0])
    text += f"\nüèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.first_name}"
    await context.bot.send_message(chat_id, text)
    del games[chat_id]

# –û—Å–Ω–æ–≤–Ω–æ–π Telegram –±–æ—Ç
async def telegram_main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("join", join))
    app.add_handler(CommandHandler("quiz", start_quiz))
    app.add_handler(CallbackQueryHandler(button))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

# –ó–∞–ø—É—Å–∫ Flask –∏ Telegram-–±–æ—Ç–∞
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    threading.Thread(target=lambda: web_app.run(host="0.0.0.0", port=port)).start()
    asyncio.run(telegram_main())
